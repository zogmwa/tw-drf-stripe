"""
Django settings for taggedweb project.

Generated by 'django-admin startproject' using Django 3.2.2.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

import os
from pathlib import Path
import sentry_sdk
from sentry_sdk.integrations.django import DjangoIntegration

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-rvyqw!#&stjgu+!8c2(ss(eybp&ypyhd)i*k6v#n2i9)y1=pdc'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

TAGGEDWEB_ELASTIC_IP = '18.213.87.2'

BASE_API_URL = 'api.taggedweb.com'
BASE_FRONTEND_URL = 'www.taggedweb.com'
ALLOWED_HOSTS = [
    TAGGEDWEB_ELASTIC_IP,
    BASE_API_URL,
    'taggedweb.com',
    'localhost',
    '127.0.0.1',
    'staging.taggedweb.com',
]

# Difference between ALLOWED_HOSTS and CORS_ALLOWED_ORIGINS:
# https://stackoverflow.com/a/47229671/1819254
CORS_ALLOWED_ORIGINS = [
    "https://taggedweb.com",
    "https://www.taggedweb.com",
    "https://{}".format(BASE_API_URL),
    # This is temporary, just for making local development easy on port 3000
    "http://localhost:3000",
    "http://127.0.0.1:3000",
    "https://staging.taggedweb.com",
]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'drf_yasg',
    # 3P Apps
    'corsheaders',
    'guardian',
    'storages',
    'django_elasticsearch_dsl',
    'django_extensions',
    'django_filters',
    'djstripe',
    'phonenumber_field',
    'rest_framework',
    'rest_framework.authtoken',
    ## Authentication
    'dj_rest_auth',
    'dj_rest_auth.registration',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',
    'allauth.socialaccount.providers.linkedin_oauth2',
    # Project Apps
    'api',
    'payments',
    # Scheduled Job
    'django_apscheduler',
    # django-newsletter (for campaigns management)
    'sorl.thumbnail',
    'newsletter',
    'django_inlinecss',
]

SITE_ID = 1
LOGIN_REDIRECT_URL = '/'

# Authentication Settings
ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_USERNAME_REQUIRED = False


# Note: These may not be used if the taggedweb-frontend Next app decides to directly hit LinkedIn
SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'SCOPE': [
            'profile',
            'email',
        ],
        'AUTH_PARAMS': {
            'access_type': 'online',
        },
    },
    'linkedin': {
        'SCOPE': ['r_basicprofile', 'r_emailaddress'],
        'PROFILE_FIELDS': [
            'id',
            'first-name',
            'last-name',
            'email-address',
            'picture-url',
            'public-profile-url',
        ],
    },
}


# Other Settings

EMAIL_BACKEND = 'django_ses.SESBackend'
DEFAULT_FROM_EMAIL = 'noreply@taggedweb.com'
AWS_SES_REGION_NAME = 'us-west-2'
AWS_SES_REGION_ENDPOINT = 'email.us-west-2.amazonaws.com'
SOCIAL_ACCOUNT_EMAIL_VERIFICATION = "none"
SOCIAL_ACCOUNT_EMAIL_REQUIRED = False
REST_USE_JWT = True


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'taggedweb.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'taggedweb.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': 'postgres',
        'HOST': 'localhost',
        'USER': 'postgres',
        # Replace with decrypted secret for prod overrides/and your local postgres password for local overrides.
        'PASSWORD': 'postgres',
        'PORT': '5432',
    },
}

AUTH_USER_MODEL = 'api.User'

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

REST_AUTH_SERIALIZERS = {
    'PASSWORD_RESET_SERIALIZER': 'api.serializers.password_reset.PasswordResetSerializer',
}

REST_AUTH_REGISTER_SERIALIZERS = {
    'REGISTER_SERIALIZER': 'api.serializers.dj_rest_auth_allauth.CustomRegisterSerializer',
}

# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# For S3 and SES access
AWS_ACCESS_KEY_ID = "AKIA4Y3JRSCZCU6XIXWE"
AWS_SECRET_ACCESS_KEY = "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"
AWS_STORAGE_BUCKET_NAME = 'taggedweb'
AWS_DEFAULT_ACL = 'public-read'
AWS_AUTO_CREATE_BUCKET = True
AWS_S3_CUSTOM_DOMAIN = '%s.s3.amazonaws.com' % AWS_STORAGE_BUCKET_NAME

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATICFILES_LOCATION = 'static'
STATICFILES_STORAGE = 'api.storage_backends.S3StaticStorage'
DEFAULT_FILE_STORAGE = 'api.storage_backends.S3StaticStorage'

AWS_S3_REGION_NAME = 'us-east-1'
STATIC_URL = "https://{}/{}/".format(AWS_S3_CUSTOM_DOMAIN, STATICFILES_LOCATION)
AWS_QUERYSTRING_AUTH = False

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

AUTHENTICATION_BACKENDS = (
    # ModelBackend is the default, but we also want object level permissions with django-guardian
    'django.contrib.auth.backends.ModelBackend',
    'guardian.backends.ObjectPermissionBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
)

GUARDIAN_MONKEY_PATCH = False
GUARDIAN_GET_INIT_ANONYMOUS_USER = 'api.models.get_anonymous_user_instance'

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.BasicAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.TokenAuthentication',
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        "dj_rest_auth.utils.JWTCookieAuthentication",
    ],
    # Use Django's standard `django.contrib.auth` permissions,
    # or allow read-only access for unauthenticated users.
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly'
    ],
    'DEFAULT_THROTTLE_CLASSES': [
        # 'rest_framework.throttling.AnonRateThrottle',
        'rest_framework.throttling.UserRateThrottle',
        'api.throttling.SubscriptionDailyRateThrottle',
    ],
    'DEFAULT_THROTTLE_RATES': {
        # 'anon': '10000/day',
        'user': '2000/day',
        'subscription': '2000/day',
    },
    'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend'],
}

ELASTICSEARCH_DSL = {
    'default': {'hosts': 'localhost:9200'},
}

# DJStripe pendpoints reside at /stripe/* so this will be at /webhook
DJSTRIPE_WEBHOOK_URL = r"^webhook/$"


# Putting test key in live for now, live key will be added from env variables
STRIPE_LIVE_SECRET_KEY = os.environ.get(
    "STRIPE_LIVE_SECRET_KEY",
    "sk_test_51Jr8jiJNxEeFbcNwF6j8okHix9wHaHsO0eebSr28X0t3Hfan8awLcGTevmkO1fz7uRnFv7uKZGkPTfSN7VmdpsI700Lm7hIwI8",
)

STRIPE_TEST_SECRET_KEY = os.environ.get(
    "STRIPE_TEST_SECRET_KEY",
    "sk_test_51Jr8jiJNxEeFbcNwF6j8okHix9wHaHsO0eebSr28X0t3Hfan8awLcGTevmkO1fz7uRnFv7uKZGkPTfSN7VmdpsI700Lm7hIwI8",
)

STRIPE_TEST_PUBLISHED_KEY = "pk_test_51Jr8jiJNxEeFbcNwYK4zSYR9QXNpuJFVAwfhPCq6GCbmrEurPmmUZtb8NlWP5corMqGXct9BeJb0E5UuWYBtQftx00i7X2aK18"
DJSTRIPE_WEBHOOK_SECRET = "whsec_RQ9TJZ4iuWE8THb13keag8DCCc6Lieun"
# These are test keys, once we are moving live may want to move this key to AWS SSM or some other secrets manager
DJSTRIPE_FOREIGN_KEY_TO_FIELD = "id"
DJSTRIPE_USE_NATIVE_JSONFIELD = True

# Change to True in production
STRIPE_LIVE_MODE = False

# django-apscheduler setting

# Format string for displaying run time timestamps in the Django admin site. The default
# just adds seconds to the standard Django format, which is useful for displaying the timestamps
# for jobs that are scheduled to run on intervals of less than one minute.
#
# See https://docs.djangoproject.com/en/dev/ref/settings/#datetime-format for format string
# syntax details.
APSCHEDULER_DATETIME_FORMAT = "%Y-%m-%d %H:%M"

# Maximum run time allowed for jobs that are triggered manually via the Django admin site, which
# prevents admin site HTTP requests from timing out.
#
# Longer running jobs should probably be handed over to a background task processing library
# that supports multiple background worker processes instead (e.g. Dramatiq, Celery, Django-RQ,
# etc. See: https://djangopackages.org/grids/g/workers-queues-tasks/ for popular options).
APSCHEDULER_RUN_NOW_TIMEOUT = 7200  # Seconds

NEWSLETTER_THUMBNAIL = 'sorl-thumbnail'

THIRD_PATRY_SESSION_EXPIRE_DURATION = 3600  # Seconds - 1 hour


sentry_sdk.init(
    dsn="https://ae3e3499901e40a0a7848f5485d32587@o1064580.ingest.sentry.io/6055486",
    integrations=[DjangoIntegration()],
    # Set traces_sample_rate to 1.0 to capture 100% and 0.0 to disable.
    # We are disabling this in prodution and will re-enable in our respective environments.
    traces_sample_rate=0.0,
    # If you wish to associate users to errors (assuming you are using
    # django.contrib.auth) you may enable sending PII data.
    send_default_pii=True,
    debug=False,
    # development/staging/production
    environment='development',
    # By default the SDK will try to use the SENTRY_RELEASE
    # environment variable, or infer a git commit
    # SHA as release, however you may want to set
    # something more human-readable.
    # release="myapp@1.0.0",
)


try:
    # Over-ride settigs be defined for customization on production servers/local
    from .override_settings import *
except ImportError:
    pass
